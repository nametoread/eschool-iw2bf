parameters:
  - name: azureConnection
    default: ""
  - name: rgName
    default: ""
  - name: file
    default: ""
  - name: params
    default: ""

stages:
  - stage: Deploy
    jobs:
      - job: Deploy
        steps:
          - task: AzureCLI@2
            name: Deploy
            displayName: Deploy base infrastructure to Azure
            inputs:
              azureSubscription: ${{ parameters.azureConnection }}
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                TIMESTAMP
                az deployment group create \
                  --name "dep-missionctl-$(Build.BuildNumber)" \
                  --resource-group ${{ parameters.rgName }} \
                  --template-file ${{ parameters.file }} \
                  --parameters ${{ parameters.params }}
      - job: UpdateLibrary
        displayName: Update Library with outputs
        dependsOn: Deploy
        steps:
          - task: AzureCLI@2
            name: DevOpsParamsConfigure
            displayName: Set default DevOps parameters
            inputs:
              azureSubscription: ${{ parameters.azureConnection }}
              scriptType: "bash"
              scriptLocation: "inlineScript"
              inlineScript: |
                az devops configure \
                  --defaults \
                    organization=$(System.TeamFoundationCollectionUri) \
                    project=$(System.TeamProject) \
                  --use-git-aliases true
          - task: AzureCLI@2
            name: SaveOutputs
            displayName: Save outputs to global group
            inputs:
              azureSubscription: ${{ parameters.azureConnection }}
              scriptType: "pscore"
              scriptLocation: "inlineScript"
              inlineScript: |
                $vg_id = az pipelines variable-group list `
                  --group-name globalGroup `
                  --query "[].id" `
                  --output tsv

                $deployment = Get-AzResourceGroupDeployment `
                  -ResourceGroupName "${{ parameters.rgName }}" `
                  -Name "dep-missionctl-$(Build.BuildNumber)"

                foreach ($raw_output in $deployment.Outputs.GetEnumerator()) {
                    $name = $raw_output.Key
                    $value = $raw_output.Value.Value

                    $var_exist = az pipelines variable-group variable list `
                      --group-id "$vg_id" `
                      --query "$name" `
                      --output tsv

                    $vg_action = "update"

                    if ($var_exist -eq "") {
                      $vg_action = "create"
                    }

                    az pipelines variable-group variable "$vg_action" `
                      --group-id "$vg_id" `
                      --name "$name" `
                      --value "$value"
                }
            env:
              AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
